name: Update Submodules

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *' # every day at midnight

jobs:
  update-submodules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Authenticate with GitHub CLI
        run: echo "${{ secrets.WORKFLOW_TOKEN }}" | gh auth login --with-token

      - name: Read repository topic and owners
        id: read_files
        run: |
          topic=$(cat repo_topic.txt)
          echo "REPO_TOPIC=${topic}" >> $GITHUB_ENV

          owners=$(cat repo_owner.txt | tr '\n' ' ')
          echo "REPO_OWNERS=${owners}" >> $GITHUB_ENV

      - name: Get list of repositories with the topic from repo_topic.txt
        id: get_repos
        run: |
          repos=$(curl -H "Authorization: token ${{ secrets.WORKFLOW_TOKEN }}" \
                    "https://api.github.com/search/repositories?q=topic:${{ env.REPO_TOPIC }}" \
                    | jq -r '.items[].full_name')
          echo "Found repositories: $repos"
          echo "$repos" > repos.txt
          echo "REPOS=$(echo "$repos" | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Upload list of repositories
        uses: actions/upload-artifact@v3
        with:
          name: repositories
          path: repos.txt

      - name: Update submodules in each repository
        run: |
          git config --global user.email "${{ secrets.G_EMAIL }}"
          git config --global user.name "${{ secrets.G_NAME }}"

          IFS=' ' read -r -a repo_array <<< "${{ env.REPOS }}"
          IFS=' ' read -r -a owner_array <<< "${{ env.REPO_OWNERS }}"
          echo "Repositories to process: ${#repo_array[@]}"
          for repo in "${repo_array[@]}"; do
            echo "Processing repository $repo"
            owner=$(echo $repo | cut -d'/' -f1)
            if [[ " ${owner_array[@]} " =~ " ${owner} " ]]; then
              echo "Processing repository $repo"
              git clone https://github.com/$repo temp_repo
              cd temp_repo
              git submodule update --init --recursive
              git submodule update --remote
              # Add debugging steps
              echo "Listing submodules:"
              git submodule
              echo "Listing contents of submodule/Mupdate:"
              ls submodule/Mupdate
              mkdir -p src/resources
              cp submodule/Mupdate/Mupdate.lua src/resources/Mupdate.lua
              if [ -n "$(git status --porcelain)" ]; then
                echo "Changes detected in $repo, committing and pushing updates"
                # Update mfile version
                version=$(jq -r '.version' mfile)
                IFS='.' read -r -a semver <<< "$version"
                semver[2]=$((semver[2] + 1))
                new_version="${semver[0]}.${semver[1]}.${semver[2]}"
                jq --arg new_version "$new_version" '.version = $new_version' mfile > mfile.tmp && mv mfile.tmp mfile
                echo "Updated version to $new_version"
                git add mfile src/resources/Mupdate.lua
                git commit -m "Update submodules and increment version to $new_version"
                # Use the GitHub token for authentication
                git remote set-url origin https://x-access-token:${{ secrets.WORKFLOW_TOKEN }}@github.com/$repo.git
                git push
              else
                echo "No changes detected in $repo"
              fi
              cd ..
              rm -rf temp_repo
            else
              echo "Skipping repository $repo as it is not owned by a valid owner"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        shell: bash -l {0}
        continue-on-error: true

      - name: Capture error log
        if: failure()
        run: dmesg | tail -20
