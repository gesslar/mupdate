name: Update Submodules

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *' # every day at midnight

jobs:
  update-submodules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Authenticate with GitHub CLI
        run: echo "${{ secrets.WORKFLOW_TOKEN }}" | gh auth login --with-token

      - name: Test GitHub CLI authentication
        run: gh auth status

      - name: Get list of repositories with the topic 'mudlet-package'
        id: get_repos
        run: |
          repos=$(curl -H "Authorization: token ${{ secrets.WORKFLOW_TOKEN }}" \
                    "https://api.github.com/search/repositories?q=topic:mudlet-package" \
                    | jq -r '.items[].full_name')
          echo "Found repositories: $repos"
          echo "$repos" > repos.txt
          echo "REPOS=$repos" >> $GITHUB_ENV

      - name: Upload list of repositories
        uses: actions/upload-artifact@v3
        with:
          name: repositories
          path: repos.txt

      - name: Update submodules in each repository
        run: |
          IFS=$'\n' read -r -d '' -a repo_array <<< "${{ env.REPOS }}"
          echo "Repositories to process: ${#repo_array[@]}"
          for repo in "${repo_array[@]}"; do
            echo "Processing repository $repo"
            owner=$(echo $repo | cut -d'/' -f1)
            if [ "$owner" == "gesslar" ]; then
              echo "Processing repository $repo"
              git clone https://github.com/$repo temp_repo
              cd temp_repo
              git submodule update --remote --merge
              if [ -n "$(git status --porcelain)" ]; then
                echo "Changes detected in $repo, committing and pushing updates"
                git add .
                git commit -m "Update submodules"
                git push
              else
                echo "No changes detected in $repo"
              fi
              cd ..
              rm -rf temp_repo
            else
              echo "Skipping repository $repo as it is not owned by gesslar"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        shell: bash -l {0}
        continue-on-error: true

      - name: Capture error log
        if: failure()
        run: dmesg | tail -20
